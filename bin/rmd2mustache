#!/usr/bin/env raku

my %*SUB-MAIN-OPTS =
  :named-anywhere
;
multi sub MAIN(
    Str $rmd-file where *.IO.f && *.IO.r,
    Str $dest-dir where *.IO.e.flip || *.IO.d && *.IO.w,
    :$langs!,
) {
    my $dest-file = $dest-dir.IO.add($rmd-file.IO.basename).extension('mustache');
    if ($dest-file.e && !$dest-file.w) {
        die "The file {$dest-file} is not writable.";
    }

    my @langs = $langs.split(/\s+/);
    my $mustache = convert-to-mustache($rmd-file.IO.slurp, @langs);

    $dest-file.spurt($mustache);
}

multi sub MAIN(
    Str $rmd-file where *.IO.f && *.IO.r,
    Str $dest-dir where *.IO.e.flip || *.IO.d && *.IO.w,
) {
    my $dest-file = $dest-dir.IO.add($rmd-file.IO.basename).extension('mustache');
    if ($dest-file.e && !$dest-file.w) {
        die "The file {$dest-file} is not writable.";
    }

    my $mustache = convert-to-mustache($rmd-file.IO.slurp);

    $dest-file.spurt($mustache);
}

sub USAGE {
    say qq:to/EOS/;
        Usage:
          {$*PROGRAM.basename} [OPTION] <rmd-file> <dest-dir>
        Convert R Markdown file into Mustache.

        <rmd-file> must be a readable file and <dest-dir> must be a writable directory.
        A basename of output file is the same as one of <rmd-file>, but its extension will be 'mustache'.

          --langs     content languages split by space
                      (example: "ja en")
        EOS
}

use Text::Markdown;
use YAMLish;

multi sub convert-to-mustache(
    Str $rmd,
    @langs,
) {
    my @rmds = split-multiple-rmds($rmd);

    my %merged-yaml;
    my $content-part;
    for @rmds -> %parts {
        my $lang = shift @langs or last;
        my $lang-start = "\{\{#lang_{$lang}}}";
        my $lang-end   = "\{\{/lang_{$lang}}}";

        my %yaml = load-yaml(%parts<yaml>);
        for %yaml.kv -> $key, $value {
            %merged-yaml{$key} ~= $lang-start ~ $value ~ $lang-end;
        }

        $content-part ~= qq:to/EOS/;
            {$lang-start}
            {convert-md-to-html(%parts<md>)}
            {$lang-end}
            EOS
    }

    if (@langs) {
        note "Contents written in following language(s) are not found:\n  {@langs.join(', ')}";
    }

    my $yaml-part = save-yaml(%merged-yaml).subst(/...$/, "---");
    return qq:to/EOS/;
        {$yaml-part}
        {$content-part.chomp}
        EOS
}

multi sub convert-to-mustache(
    Str $rmds,
) {
    my ($rmd) = split-multiple-rmds($rmds);
    return qq:to/EOS/;
        ---
        {$rmd<yaml>}
        ---
        {convert-md-to-html($rmd<md>)}
        EOS
}

sub convert-md-to-html(
    Str $md,
    Int $heading-offset where { $heading-offset >= 0 } = 2,
) {
    return parse-markdown($md.subst(/^\#/, '#' x ($heading-offset + 1), :g)).to-html;
}

sub split-multiple-rmds(
    Str $rmd
) {
    my @rmds;
    my ($discard, @parts) = $rmd.split(/'---'\n/)>>.chomp;
    while (@parts) {
        my $yaml = shift @parts;
        my $md = shift @parts;
        @rmds.push: %(
            yaml => $yaml,
            md   => $md,
        );
    }
    return @rmds;
}
